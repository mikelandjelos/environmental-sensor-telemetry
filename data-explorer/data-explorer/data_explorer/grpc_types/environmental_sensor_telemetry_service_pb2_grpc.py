# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

from . import (
    environmental_sensor_telemetry_service_pb2 as environmental__sensor__telemetry__service__pb2,
)


class EnvironmentalSensorTelemetryStub(object):
    """The greeting service definition."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ping = channel.unary_unary(
            "/environmental_sensor_telemetry.EnvironmentalSensorTelemetry/Ping",
            request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            response_deserializer=environmental__sensor__telemetry__service__pb2.PingResponse.FromString,
        )
        self.WriteMeasurementsBatched = channel.unary_unary(
            "/environmental_sensor_telemetry.EnvironmentalSensorTelemetry/WriteMeasurementsBatched",
            request_serializer=environmental__sensor__telemetry__service__pb2.WriteBatchRequest.SerializeToString,
            response_deserializer=environmental__sensor__telemetry__service__pb2.WriteDataResponse.FromString,
        )
        self.WriteMeasurementsStream = channel.stream_stream(
            "/environmental_sensor_telemetry.EnvironmentalSensorTelemetry/WriteMeasurementsStream",
            request_serializer=environmental__sensor__telemetry__service__pb2.EnvironmentalSensorTelemetryData.SerializeToString,
            response_deserializer=environmental__sensor__telemetry__service__pb2.WriteDataResponse.FromString,
        )
        self.ReadMeasurementsOverTimeSpan = channel.unary_unary(
            "/environmental_sensor_telemetry.EnvironmentalSensorTelemetry/ReadMeasurementsOverTimeSpan",
            request_serializer=environmental__sensor__telemetry__service__pb2.ReadMeasurementsOverTimeSpanRequest.SerializeToString,
            response_deserializer=environmental__sensor__telemetry__service__pb2.ReadMeasurementsOverTimeSpanResponse.FromString,
        )
        self.ReadFieldsOverTimeSpan = channel.unary_unary(
            "/environmental_sensor_telemetry.EnvironmentalSensorTelemetry/ReadFieldsOverTimeSpan",
            request_serializer=environmental__sensor__telemetry__service__pb2.ReadFieldsOverTimeSpanRequest.SerializeToString,
            response_deserializer=environmental__sensor__telemetry__service__pb2.ReadFieldsOverTimeSpanResponse.FromString,
        )
        self.AggregateOverTimeSpan = channel.unary_unary(
            "/environmental_sensor_telemetry.EnvironmentalSensorTelemetry/AggregateOverTimeSpan",
            request_serializer=environmental__sensor__telemetry__service__pb2.AggregateOverTimeSpanRequest.SerializeToString,
            response_deserializer=environmental__sensor__telemetry__service__pb2.AggregateOverTimeSpanResponse.FromString,
        )
        self.DeleteForTimeSpan = channel.unary_unary(
            "/environmental_sensor_telemetry.EnvironmentalSensorTelemetry/DeleteForTimeSpan",
            request_serializer=environmental__sensor__telemetry__service__pb2.DeleteForTimeSpanRequest.SerializeToString,
            response_deserializer=environmental__sensor__telemetry__service__pb2.DeleteForTimeSpanResponse.FromString,
        )


class EnvironmentalSensorTelemetryServicer(object):
    """The greeting service definition."""

    def Ping(self, request, context):
        """If all is well, returns "Pong!" string as a response."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def WriteMeasurementsBatched(self, request, context):
        """Batch write."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def WriteMeasurementsStream(self, request_iterator, context):
        """Stream write."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ReadMeasurementsOverTimeSpan(self, request, context):
        """Read measurements over time span."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ReadFieldsOverTimeSpan(self, request, context):
        """Read singular fields over time span."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def AggregateOverTimeSpan(self, request, context):
        """Aggregate values over multiple periods."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DeleteForTimeSpan(self, request, context):
        """Delete points over a timespan."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_EnvironmentalSensorTelemetryServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "Ping": grpc.unary_unary_rpc_method_handler(
            servicer.Ping,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=environmental__sensor__telemetry__service__pb2.PingResponse.SerializeToString,
        ),
        "WriteMeasurementsBatched": grpc.unary_unary_rpc_method_handler(
            servicer.WriteMeasurementsBatched,
            request_deserializer=environmental__sensor__telemetry__service__pb2.WriteBatchRequest.FromString,
            response_serializer=environmental__sensor__telemetry__service__pb2.WriteDataResponse.SerializeToString,
        ),
        "WriteMeasurementsStream": grpc.stream_stream_rpc_method_handler(
            servicer.WriteMeasurementsStream,
            request_deserializer=environmental__sensor__telemetry__service__pb2.EnvironmentalSensorTelemetryData.FromString,
            response_serializer=environmental__sensor__telemetry__service__pb2.WriteDataResponse.SerializeToString,
        ),
        "ReadMeasurementsOverTimeSpan": grpc.unary_unary_rpc_method_handler(
            servicer.ReadMeasurementsOverTimeSpan,
            request_deserializer=environmental__sensor__telemetry__service__pb2.ReadMeasurementsOverTimeSpanRequest.FromString,
            response_serializer=environmental__sensor__telemetry__service__pb2.ReadMeasurementsOverTimeSpanResponse.SerializeToString,
        ),
        "ReadFieldsOverTimeSpan": grpc.unary_unary_rpc_method_handler(
            servicer.ReadFieldsOverTimeSpan,
            request_deserializer=environmental__sensor__telemetry__service__pb2.ReadFieldsOverTimeSpanRequest.FromString,
            response_serializer=environmental__sensor__telemetry__service__pb2.ReadFieldsOverTimeSpanResponse.SerializeToString,
        ),
        "AggregateOverTimeSpan": grpc.unary_unary_rpc_method_handler(
            servicer.AggregateOverTimeSpan,
            request_deserializer=environmental__sensor__telemetry__service__pb2.AggregateOverTimeSpanRequest.FromString,
            response_serializer=environmental__sensor__telemetry__service__pb2.AggregateOverTimeSpanResponse.SerializeToString,
        ),
        "DeleteForTimeSpan": grpc.unary_unary_rpc_method_handler(
            servicer.DeleteForTimeSpan,
            request_deserializer=environmental__sensor__telemetry__service__pb2.DeleteForTimeSpanRequest.FromString,
            response_serializer=environmental__sensor__telemetry__service__pb2.DeleteForTimeSpanResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "environmental_sensor_telemetry.EnvironmentalSensorTelemetry",
        rpc_method_handlers,
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class EnvironmentalSensorTelemetry(object):
    """The greeting service definition."""

    @staticmethod
    def Ping(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/environmental_sensor_telemetry.EnvironmentalSensorTelemetry/Ping",
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            environmental__sensor__telemetry__service__pb2.PingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def WriteMeasurementsBatched(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/environmental_sensor_telemetry.EnvironmentalSensorTelemetry/WriteMeasurementsBatched",
            environmental__sensor__telemetry__service__pb2.WriteBatchRequest.SerializeToString,
            environmental__sensor__telemetry__service__pb2.WriteDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def WriteMeasurementsStream(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            "/environmental_sensor_telemetry.EnvironmentalSensorTelemetry/WriteMeasurementsStream",
            environmental__sensor__telemetry__service__pb2.EnvironmentalSensorTelemetryData.SerializeToString,
            environmental__sensor__telemetry__service__pb2.WriteDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ReadMeasurementsOverTimeSpan(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/environmental_sensor_telemetry.EnvironmentalSensorTelemetry/ReadMeasurementsOverTimeSpan",
            environmental__sensor__telemetry__service__pb2.ReadMeasurementsOverTimeSpanRequest.SerializeToString,
            environmental__sensor__telemetry__service__pb2.ReadMeasurementsOverTimeSpanResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ReadFieldsOverTimeSpan(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/environmental_sensor_telemetry.EnvironmentalSensorTelemetry/ReadFieldsOverTimeSpan",
            environmental__sensor__telemetry__service__pb2.ReadFieldsOverTimeSpanRequest.SerializeToString,
            environmental__sensor__telemetry__service__pb2.ReadFieldsOverTimeSpanResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def AggregateOverTimeSpan(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/environmental_sensor_telemetry.EnvironmentalSensorTelemetry/AggregateOverTimeSpan",
            environmental__sensor__telemetry__service__pb2.AggregateOverTimeSpanRequest.SerializeToString,
            environmental__sensor__telemetry__service__pb2.AggregateOverTimeSpanResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def DeleteForTimeSpan(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/environmental_sensor_telemetry.EnvironmentalSensorTelemetry/DeleteForTimeSpan",
            environmental__sensor__telemetry__service__pb2.DeleteForTimeSpanRequest.SerializeToString,
            environmental__sensor__telemetry__service__pb2.DeleteForTimeSpanResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
